#include <iostream>
#include <cstdio>
#include <string>
#include <algorithm>
#include <map>
#include <vector>
using namespace std;
typedef struct Stu
{
	string id;
	int online, mid, final, G;
}Stu;
int cmp(Stu a, Stu b)
{
	return a.G!=b.G ? a.G>b.G : a.id<b.id;
}
map<string, int> idMatch;//map判断是否匹配 
int main()
{
	int p, m, n;
	scanf("%d%d%d", &p, &m, &n);
	string str;
	int temp, cnt = 1;//下标从1开始 
	vector<Stu> stu, ans;//这里用vector动态数组 
	stu.push_back(Stu{"", 0, 0, 0, 0});//占0号坑，下标从1开始 
	for(int i=0; i<p; ++i)
	{
		cin>>str>>temp;
		if(temp>=200)
		{
			stu.push_back(Stu{str, temp, -1, -1, 0});
			idMatch[str] = cnt++;
		}
	}
	for(int i=0; i<m; ++i)
	{
		cin>>str>>temp;
		int key = idMatch[str];
		if(key!=0)//如果匹配不到会返回0. 所以cnt得从1开始 
			stu[key].mid = temp; 
	}
	for(int i=0; i<n; ++i)
	{
		cin>>str>>temp;
		int key = idMatch[str];
		if(key!=0)//如果匹配不到会返回0. 所以cnt得从1开始 
		{
			stu[key].final = temp; 
			if(stu[key].mid<=stu[key].final)	stu[key].G = stu[key].final;//在这里处理G的值，简洁！！！ 
			else	stu[key].G = stu[key].mid*0.4 + stu[key].final*0.6 + 0.5;
		} 
	}
	for(int i=1; i<stu.size(); ++i)
		if(stu[i].G>=60) ans.push_back(stu[i]); 
	sort(ans.begin(), ans.end(), cmp);
	for(int i=0; i<ans.size(); ++i)
	{
		printf("%s %d %d %d %d\n", ans[i].id.c_str(), ans[i].online, ans[i].mid, ans[i].final, ans[i].G);
	}
    return 0;
}
